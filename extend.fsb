\ extend.fsb
\ Main extensions for ZX Spectrum Abersoft Forth

\ Copyright (C) 1985-1987,2015 Marcos Cruz (programandala.net)

\ This file is part of
\ Afera (Abersoft Forth Extensions, Resources and Addons)
\ http://programandala.net/en.program.afera.html

  \ This is the main file of the Afera library.  It defines the
  \ words required by most of the modules and also fixes some
  \ bugs of the system.  

  \ WARNING:
  \
  \ In order to load this file before the "11263" bug is fixed
  \ (see above), this file must have less than 11 blocks, the
  \ maximum allowed by Abersoft Forth. The reason is fsb
  \ (http://programandala.net/en.program.fsb.html), the tools
  \ that converts this source file to a ZX Spectrum TAP file,
  \ creates a proper file with 11264 bytes, instead the 11263
  \ bytes that Abersoft Forth expects because of the bug.  Once
  \ the bug has been fixed, the other modules of the library
  \ don't have that limitation: they can use 11 blocks.

  \ History of this file: see at the end of the file.

( Line comments, bug fixes)

." Main extensions "  FORTH DEFINITIONS                     HEX

  \ ............................................
  \ Line comments

: \  ( "ccc<newline>" -- )
  IN @ DUP C/L > IF  B/BUF SWAP MOD  ELSE  C/L SWAP -  THEN
  IN +!  ; IMMEDIATE

: .(  ( "ccc<paren>" -- )
  29 ( paren ) TEXT PAD COUNT TYPE  ; IMMEDIATE

  \ ............................................
  \ Fix the "11263" bug

  \ The length of the RAM-disk must be 11264 (0x2C00), `HI LO -
  \ 1+`, not 11263 (0x2BFF), `HI LO -`.

  \ Length of the RAM-disk, that will be used also
  \ by other modules.
HI LO - 1+ CONSTANT /DISC

  \ Patch the load tape header (no need to patch also the save
  \ header, because the load header ss copied to the save
  \ header during the tape operations).
/DISC 75E6 0B + !

  \ Patch `INIT-DISC`.
/DISC ' INIT-DISC 06 + !

  \ ............................................
  \ Fix the `2OVER` bug

  \ `2OVER` must do `R> R>` at the end, not `>R >R`
  \
  \ As Don Thomasson's _Advanced Spectrum Forth_ (1984) says
  \ (page 131), early versions of Abersoft Forth contained an
  \ error in the word `2OVER`, that hangs the system. So just
  \ in case:

' R> CFA ' 2OVER 0A + 2DUP ! 2+ !

  \ ............................................
  \ Fix the `EXIT` bug

  \ `EXIT` must do `R> DROP`, not `>R DROP`
  \
  \ Even Don Thomasson's _Advanced Spectrum Forth_ (1984) shows
  \ the wrong definition of `EXIT` (page 131)... and with the
  \ following notice: "This word needs to be used with extreme
  \ care." Indeed, because it crashes the system. The fix is
  \ easy:

' R> CFA ' EXIT !

  \ ............................................
  \ Fix the `COLD` bug

  \ The word `COLD` has a subtle bug: it inits `PREV` and `USE`
  \ not with `FIRST`, the constant that holds the start address
  \ of the first disk buffer, but with its default value! This
  \ must be fixed in order to move the disk buffers (what does
  \ the <lowersys.fsb> module).

  ' NOOP CFA ' COLD 02 + !  ' FIRST CFA ' COLD 04 + !
  ' NOOP CFA ' COLD 0A + !  ' FIRST CFA ' COLD 0C + !

  \ ............................................
  \ Bugs not fixed yet

  \ `MESSAGE` does not work with odd negative numbers: they
  \ print the content of an unknown memory zone. The problem is
  \ the calculation done by `(LINE)`. In fact `*/MOD`, `MOD`
  \ and `/MOD`, with certain negative values, return different
  \ results in Abersoft Forth and other Forth systems that have
  \ been tested (some of them are fig-Forth).  The problem
  \ seems to be in Abersoft Forth's `U/MOD`, written in
  \ assembler.
  \
  \ `INK` has a bug that causes `PLOT` to use 0 instead the
  \ proper attribute in most cases. The alternative definition
  \ provided in <color.fsb> works fine.
                                                    DECIMAL -->
( Patches )
                                                            HEX
  \ ............................................
  \ Cosmetic patches

' NOOP CFA ' ABORT 08 + !   \ no `CR` in `ABORT`
' NOOP CFA ' INDEX !        \ no `CLS` in `INDEX`
' NOOP CFA ' LIST !         \ no `DECIMAL` in `LIST`
         2 ' LIST 23 + !    \ less margin in `LIST`

  \ ............................................
  \ Patch: Make screen 0 usable

  \ Abersoft Forth doesn't allow to compile sources from the
  \ first screen of its 11 KiB RAM-disk, by convention reserved
  \ to comments. But that is a waste of memory.  This patch
  \ solves that problem.
  \
  \ After this patch is done, screen numbers of the RAM-disk
  \ are 1..11 instead of 0..10.

  \ The only word that has to be patched is `R/W`, the
  \ fig-Forth standard disk read/write linkage, a system
  \ dependent word. Its definition in Abersoft Forth, that uses
  \ a RAM-disk insted of a real disk, is the following:

  \ : R/W  ( a n f -- )
  \   \ a = source or destination block buffer
  \   \ n = sequential block number on disk
  \   \ f = 0 for disk write, 1 for read
  \   >R  B/BUF * LO +
  \   DUP HI > LIT 6 ?ERROR  \ out of upper bound?
  \   R>  \ disk read?
  \   IF  SWAP  THEN  B/BUF CMOVE  ;

  \ The calculation `B/BUF *` must be changed. The chosen
  \ method is to substitute the `*` with a new word, `BUF*`:

B/SCR B/BUF * CONSTANT /SCR  \ bytes per screen (1024)

: BUF*  ( n1 +n2 -- +n3 )

  \ Calculate the relative address +n3 of disk block n1 in the
  \ Forth RAM-disk. Give error #6 when the requested disk block
  \ n1 belongs to the first screen of the RAM-disk.  Finally
  \ update the result one screen below.

  \ n1 = number of sequential disk block
  \ +n2 = bytes per block buffer, returned by `B/BUF`
  \ +n3 = offset in the RAM-disk (from 0 to `HI B/BUF -`)

  * DUP /SCR U< 06 ?ERROR  /SCR -  ;

  \ Patch `R/W` with `BUF*`
  \ and update `BLK` to prevent the current screen to be
  \ loaded twice. Both operations must be done on the same
  \ line, to prevent them from being in to different blocks
  \ of the screen.
  \ This screen is loaded twice (partially):
  \ ." Patching... " ' BUF* CFA 7223 ! ." Patched" CR
  ' BUF* CFA 7223 !  B/SCR BLK +!

  \ Because of the patch, the current screen would be
  \ interpreted twice, so this is needed:

  \ B/SCR BLK +! \ this screen is loaded twice (partially)
  \ This screen is #3 after the patch
  \ 3 LOAD  \ this screen is loaded forever
  \ 4 LOAD  \ this screen is loaded twice (partially)
  \ 2 BLK @ B/SCR / + LOAD

  \ XXX TODO
  \ : R/W  ( a n f -- )
  \   \ 48K version of R/W
  \   >R
  \   DISC-BLOCK
  \   R> IF  SWAP   THEN  B/BUF CMOVE  ;
                                                   DECIMAL -->
( Operators)

: CHAR  ( "name" -- c )  BL WORD HERE 1+ C@  ;
: [CHAR]  ( "name" -- c )  CHAR [COMPILE] LITERAL  ; IMMEDIATE

: INVERT  ( n1 -- n2 )  -1 XOR  ;
: BOUNDS  ( a1 len1 -- a2 a1 )  OVER + SWAP  ;
: >=  ( n1 n2 -- f )  SWAP < 0=  ;
: <=  ( n1 n2 -- f )  SWAP > 0=  ;

CREATE 1-  ( n1 -- n2 )                                     HEX
  \ 1 -
  \ pop hl / dec hl / jp PUSHHL
  E1 C, 2B C,  C3 C, PUSHHL ,  SMUDGE

CREATE 2-  ( n1 -- n2 )
  \ 2 -
  \ pop hl / dec hl / dec hl / jp PUSHHL
  E1 C, 2B C, 2B C, C3 C, PUSHHL ,  SMUDGE

  \ Patch CFA to use the Z80 code of `2-`,
  \ faster than the original colon definition `2 -`:
' 2- ' CFA CFA !
                                                            --> 
( 1+ 2+ )

  \ In Abersoft Forth `1+` and `2+` are colon words.  The
  \ following code patches the original definitions with 50%
  \ faster Z80 code, without using dictionary space: The pfa of
  \ the original words is 12 bytes long, enough for the new
  \ code.
  \
  \ The new code can not be compiled directly into the
  \ destination address, by pointing `DP` to the definition to
  \ be patched, because `WORD` does `HERE 34 SPACES`, what
  \ would corrupt the dictionary. That's why the code is
  \ compiled at `HERE` and then moved. Beside, some of the
  \ words internally used during the patching (`WORD` and
  \ others) call `1+` or `2+`.  That's why the original names
  \ can be "ticked" only before patching the original code; and
  \ the new code, including the new cfa, must overwrite the old
  \ definition in one single operation, with `CMOVE`.

HERE ' 1+  ( a pfa )
  DUP , \ the new cfa points to the code at pfa:
  E1 C, 23 C,     \ pop hl / inc hl
  C3 C, PUSHHL ,  \ jp PUSHHL
  CFA OVER SWAP OVER HERE SWAP - CMOVE  \ overwrite the word
  ( a ) DP !  \ restore the dictionary pointer

HERE ' 2+  ( a pfa )
  DUP , \ the new cfa points to the code at pfa:
  E1 C, 23 C, 23 C,   \ pop hl / inc hl / inc hl
  C3 C, PUSHHL ,  \ jp PUSHHL
  CFA OVER SWAP OVER HERE SWAP - CMOVE  \ overwrite the word
  ( a ) DP !  \ restore the dictionary pointer

                                                            -->
( Data stack)

CREATE NIP  ( n1 n2 -- n2 )
  \ SWAP DROP
  E1 C, D1 C,        \ pop hl / pop de
  C3 C, PUSHHL ,     \ jp PUSHHL
  SMUDGE

CREATE TUCK  ( n1 n2 -- n2 n1 n2 )
  \ SWAP OVER
  E1 C, D1 C, E5 C,  \ pop hl / pop de / push hl
  C3 C, PUSHDE ,     \ jp PUSHDE
  SMUDGE

: DEPTH  ( -- u )  SP@ S0 @ - -2 /  ;
                                                    DECIMAL -->
( Blocks)

  \ ............................................
  \ Standard or common usage extensions

: THRU  ( n1 n2 -- )  1+ SWAP DO  I LOAD  LOOP  ;
: +LOAD  ( n -- )  BLK @ B/SCR / + LOAD  ;
: +THRU  ( n1 n2 -- )  1+ SWAP DO  I +LOAD  LOOP  ;

  \ ............................................
  \ Load from tape and compile Forth RAM-disks

  \ The following words make it possible to chain several Forth
  \ RAM-disk files from tape, allowing the automatic
  \ compilation of sources larger than 11 blocks.

: /RUNT  ( n -- )
  \ Read a new RAM-disk from tape and load screen 'n'.
  EMPTY-BUFFERS INIT-DISC LOADT LOAD ;

: RUNT  ( -- )
  \ Read a new RAM-disk from tape and load its first screen.
  1 /RUNT  ;

                                                            -->
( Conditional compilation )

: [DEFINED]  ( "name" -- f )
  -FIND DUP IF NIP NIP THEN  ; IMMEDIATE

: [UNDEFINED]  ( "name" -- f )
  [COMPILE] [DEFINED] 0=  ; IMMEDIATE

  \ The following words provide a simpler alternative to
  \ `[IF]`, `[ELSE]` and `[THEN]`.

: ?-->  ( f -- )
  IF  [COMPILE] -->  THEN  ; IMMEDIATE

 : ?;S  ( f -- )
  \ XXX TODO the solution seems to be
  \ to manipulate the return stack
  \ XXX FIXME -- it doesn't work, it does nothing
  \ because `;S` is what `;` compiles in a colon definition:
  \ IF  [COMPILE] ;S  THEN  ; IMMEDIATE
  \ XXX FIXME -- it doesn't work, it does nothing,
  \ because the effect is the same:
  \ IF  [ ' ;S CFA ] LITERAL EXECUTE  THEN  ; IMMEDIATE
  \ XXX FIXME -- no difference,
  \ because `;S` doesn't depend on `STATE`:
  IF  [COMPILE] [ [ ' ;S CFA ] LITERAL EXECUTE  THEN
  ; IMMEDIATE

: ?\  ( f "ccc<newline>" -- )
  IF  [COMPILE] \
  THEN  ; IMMEDIATE  
                                                            -->
( Blocks )

  \ XXX TODO -- The following words are not definitive.

: /INIT-DISC  ( n -- )
  \ Blank the init disc from the given block number.
  /SCR * DUP >R /DISC SWAP - LO R> + SWAP BLANKS  ;

  \ XXX OLD
  \ : 48K'SCR  ( n -- a )
  \   \ Address of screen n in the Forth RAM-disk,
  \   \ for the Spectrum 48K.
  \   \ n = 1..11
  \   1- /SCR * LO +  ;

11 CONSTANT SCR/DR  \ screens per RAM-disk

: 'SCR  ( n -- a ) 
  \ Address of screen n in the Forth RAM-disk.
  \ n = 1..11 for 48K
  \     1..16 for 128K (with the <16kramdisks.fsb> module)
  1- DUP SCR/DR U< 0= 6 ?ERROR  \ error if not in range
  /SCR * LO +  ;

  \ -----------------------------------------------------------
  \ Temporary stuff for the development

: CLS0  ( -- )  0 PAPER 4 INK 0 BORDER CLS  ;
  \ : +BUFXXX 2 BORDER +BUF 7 BORDER  ;
  \ ' +BUFXXX CFA 29039 ! \ patch BUFFER
  \ ' +BUFXXX CFA 29131 ! \ patch BLOCK

  \ -----------------------------------------------------------
  \ History of this file
  
  \ 1985, 1986, 1987:
  \
  \ `\`, `INVERT`, `>=`, `<=`, `<>`, `SGN` (from the Abersoft
  \ Forth manual), `NOR`, `NAND`, `NXOR`, `DEPTH`, `PICK`,
  \ `DRAWL`, `RDRAW`, `RDRAWL`.
  \
  \ 2015-03:
  \
  \ `CHAR`, `[CHAR]`, `PARSE-TEXT`, `PARSE-NAME`, `SLIT`, `S,`,
  \ `SLITERAL`, `.(`, `(S)`, `S"`, `S'`, `TLOAD`, `RUNT`,
  \ `BOUNDS`, `NIP`, `[DEFINED]`, `BYE`, `UDG!`, `AKEY`,
  \ `THRU`, `+LOAD` (after Gforth), `+THRU` (after Gforth),
  \ `RDROP`, `R@`, `RDEPTH`, `SGN`, `(after`, `Gforth)`,
  \ `RECURSE`, `ROLL` (after Gforth), `XY>ATTRA`, `[DEFINED]`.
  \
  \ 2015-03-28:
  \
  \ The graphics and strings extensions are moved to their own
  \ files. Fixes of Abersoft Forth's bugs: the RAM-disk length
  \ and `EXIT`. Fix: `RDROP` was wrong.  New: `/INIT-DISC`,
  \ `TUCK`.
  \
  \ 2015-03-29:
  \
  \ `TRUE`, `FALSE`, `ON`, `OFF`, `-ROT`, `?EXIT` (after
  \ Gforth), `ALIAS` (for code words only), `HERE:` (Afera
  \ specific), `BUFFER:` (after Forth-2012). The renamings
  \ (`BYE`, `-DUP`, `VLIST`) are moved to an own file.
  \
  \ 2015-03-30:
  \
  \ `.(` is moved from the strings module, in order to use it
  \ at block headers. New: `MS`.
  \
  \ 2015-03-31:
  \
  \ New: `INKEY?`, `?RSTACK`.
  \
  \ Change: `TLOAD` is combined into `RUNT`.
  \
  \ Fix: Now `RUNT` clears the return stack.
  \
  \ Fix: `+LOAD`: the problem was `BLK` doesn't hold the block
  \ number in Abersoft Forth: it has to be divided by `B/SCR`
  \ (a constant that returns 8). The definitions of `LOAD` and
  \ `-->`, from Don Thomasson's book "Spectrum Advanced Forth",
  \ gave the definitive clue.
  \
  \ Change: simpler definitions of `>=` and `<=`; `NEGATE` is
  \ removed because it already exists, but it's called `MINUS`.
  \
  \ 2015-04-01:
  \ 
  \ Change: Now `RUNT` halts if Break is pressed.  The problem
  \ was the Fuse emulator, when the TAP file is finished,
  \ rewinds it, and this behaviour is not configurable.
  \ Therefore loading a single module of the library was
  \ impossible: it loaded itself in an endless loop.  This
  \ change solves this problem to some extent, while still
  \ keeping `RUNT` for chain loading. A better solution is
  \ searched.
  \
  \ New: Patches that make it possible to use the whole screen.
  \
  \ New: `RND`, adapted from Bertie, the demo program bundled
  \ with Abersoft Forth.
  \
  \ 2015-04-02:
  \
  \ Fix: Now `AT` works on line 32. The solution was to use
  \ `>CHAN` (conversion of `TCH` from Lennart Benschop's
  \ Spectrum Forth-83) instead of. `EMIT`.
  \
  \ Improvement: `RUNT` checks `DEPTH` instead of the Break
  \ key.
  \
  \ New: `VALUE`, `TO`, `[TO]` and `<TO>`.
  \
  \ 2015-04-03:
  \
  \ Improvement: `RUNT` checks also `BLK`; this make it
  \ possible to use it manually to load the next RAM-disk.
  \
  \ Change: `CHAR` and `[CHAR]` are moved here from the strings
  \ module.
  \
  \ 2015-04-08:
  \
  \ New (moved from the assembler): `2*`, `2-`, 1-`.
  \
  \ 2015-04-09:
  \
  \ New: `/BLOCK`.
  \
  \ Change: `AKEY` and `INKEY?` are moved to their own file
  \ <key.fsb>.
  \
  \ 2015-04-15:
  \
  \ Change: `VALUE` and related words are moved to <value.fsb>;
  \ all words related to whole screen support are moved to
  \ <plusscreen.fsb>; `ALIAS` is moved to <alias.fsb>; `CELL`
  \ and related words are moved to <cell.fsb>; `RUNT` and
  \ `?RUNT` are moved to <runt.fsb>; `HERE:` and `BUFFER:` are
  \ moved to <buffercol.fsb>.
  \
  \ 2015-04-16:
  \
  \ Change: `2*`, `2-`, `1-`, `PICK`, `NIP` and `TUCK` are
  \ rewritten in Z80.
  \
  \ New: `2/`, written in Z80 (still not working fine with
  \ negative numbers).
  \
  \ Change: `FALSE`, `TRUE`, `ON` and `OFF` are moved to
  \ <flags.fsb>.
  \
  \ 2015-04-17: `RUNT` moved back; its current definition is
  \ useful to write loaders.
  \ 
  \ 2015-04-21: New: `UNLOOP`. 
  \
  \ 2015-04-23: New: `/RUNT`, as a factor of `RUNT`.  Fix: `2/`
  \ now works fine with negative numbers; the bug was a wrong
  \ relative jump.
  \
  \ 2015-04-25: Change: `UNLOOP` and `-ROT` are rewritten in
  \ Z80.
  \
  \ 2015-04-30: Change: `BLOCK>A` is renamed to `'BLOCK`.
  \
  \ 2015-05-02: Change: `[DEFINED]`, `[UNDEFINED]`, `?-->` and
  \ `?;S` are moved here from the conditional compilation draft
  \ module. Change: `-ROT`, `ROLL` and `PICK` are moved to
  \ their own files.
  \
  \ 2015-05-03: New: 'RUNTS'. New: Patch to make screen #0
  \ usable for compiling.
  \
  \ 2015-05-03: `UNLOOP` is moved to its own file.
  \
  \ 2015-05-05: `2/` and `2*` are moved to their own files.
  \
  \ 2015-05-06:
  \
  \ `1+` and `2+` are moved here from their own files, because
  \ now they patch the original slower definitions without
  \ using any dictionary space.
  \
  \ Change: `/BLOCK` is renamed as `/SCR`, to avoid confusion
  \ with fig-Forth disk blocks.
  \
  \ New: `CFA` is patched with `2-`, for speed.
  \
  \ 2015-05-08: `RUNTS` is removed. The new modules
  \ <loader.fsb>, <loaded.fsb> and <loaded_execute.fsb> make it
  \ unnecessary.
  \
  \ 2015-05-10: Change: `'BLOCK` renamed to `'SCR`.
  \
  \ 2015-05-11: `SGN`, `RECURSE` and `?EXIT` are moved to their
  \ own files.
  \
  \ 2015-05-12: `<>`, is moved to its own file and rewritten in
  \ Z80. `?(` is moved to drafts, because it can not work yet,
  \ without `EVALUATE` or other method.

  \ -----------------------------------------------------------

  \ vim: filetype=abersoftforth
