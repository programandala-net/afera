.( G+DOS support -- part 2)

\ gplusdos_2.fsb
\ G+DOS support for ZX Spectrum Abersoft Forth (part 2)

\ Copyright (C) 1988,1994,2015 Marcos Cruz (programandala.net)

\ This file is part of
\ Afera (Abersoft Forth Extensions, Resources and Addons)
\ http://programandala.net/en.program.afera.html

  \ -----------------------------------------------------------
  \ Note

  \ "DISC" in Forth words means the Forth RAM-disk, after the
  \ name used by Abersoft Forth's documentation and vocabulary,
  \ e.g.  `INIT-DISC`.
  \
  \ "DISK" means always a G+DOS disk.
  \
  \ In the comments of this library, "disc" is not used, and
  \ the Abersoft Forth RAM-disk is always called "RAM-disk".

  \ -----------------------------------------------------------
  \ History of this file

  \ 2015-04-15: Extracted from <gdos_1.fsb>.
  \
  \ 2015-04-16: File renamed to <g+dos_2.fsb>.
  \
  \ 2015-04-30: New version of `RUND` and new word `/RUND`,
  \ after the tape versions `RUNT` and `/RUNT`. `'BLOCK`
  \ instead of `BLOCK>A`, after the change in the main file of
  \ the library.
  \
  \ 2015-05-03: Simpler word names: no "MEM" affix.
  \
  \ 2015-05-08: Renamed to <gplusdos_2.fsb>, because of an
  \ issue with Makefile. Some words are renamed.
  \
  \ 2015-05-10: `'BLOCK` changed to `'SCR`, after the changes
  \ in the library.
  \
  \ 2015-05-12:
  \
  \ The "RAM-" prefix is removed from the RAM-disk words, after
  \ the changes in the library. Minor fixes: `EMPTY-BUFFERS`
  \ instead of `FLUSH`; parameter of `/RUND`.
  \
  \ Fix: `(<DISK)`. The problem was the specified parameters,
  \ stored in UFIA, are always overwritten by the file header.
  \ Now they are saved apart and a calculation is done to
  \ decide which start address and file length must be used.
  \ 
  \ Change: `'SCR` renamed to `DISC-SCR`, after the changes in
  \ the library.
  \
  \ 2015-05-17: New: `FILE-EXISTS?`.

  \ -----------------------------------------------------------
  \ Todo

2 10 THRU

( Save a file)

CODE (>DISK)  ( -- ior )

  \ Save a file to disk using the data hold in UFIA.

  BC PUSH  IX PUSH  \ save the Forth registers
  UFIA IX LDP#
  HOFLE HOOK \ open the file and create its header
  NC IF \ no error?
    HD0D DE LDP \ start
    HD0B BC LDP \ length
    HSVBK HOOK \ save to file
    NC IF  \ no error?
      CFSM HOOK  \ close the file
    THEN
  THEN  IX POP  BC POP  \ restore the Forth registers
  AF PUSH  \ ior
  NEXT JP
  END-CODE

( Load a file -- part 1 )

CODE (<DISK)  ( -- ior )

  \ Load a file from disk, using the data hold in UFIA, the
  \ file header and the parameters specified by the high level
  \ command.

  BC PUSH  IX PUSH  \ save the Forth registers

  UFIA IX LDP#  HGFLE HOOK \ get the file
  NC IF \ no error?  -- load the file header:

    \ Load the file header
    HD00 DE LDP# 9 B LD# \ destination and count
    BEGIN
      LBYT HOOK \ load byte and store it in A
      DE STAP  DE INCP  \ update destination and count
    DSZ

( Load a file -- part 2 )

    \ The start address and lenght specified
    \ in the command are used by default instead
    \ of those stored in the file header.
    FILE-ADDRESS DE LDP
    FILE-LENGTH BC LDP

    BC TST  \ is the lenght zero?
    \ If so, use the lenght of the file header instead:
    Z IF  HD0B BC LDP  THEN

    \ Load the file data
    HLDBK HOOK

  THEN

  IX POP  BC POP  \ restore the Forth registers
  AF PUSH  \ ior
  NEXT JP

END-CODE

( Delete a file)

CODE (-DISK)  ( -- ior )

  \ Delete a disk file using the data hold in UFIA.

  BC PUSH  IX PUSH  \ save the Forth registers
  UFIA IX LDP#
  HERAZ HOOK \ erase the file
  IX POP  BC POP  \ restore the Forth registers
  AF PUSH
  NEXT JP
  END-CODE

( CAT )

CODE (CAT)  ( -- )

  \ XXX FIXME -- it prints garbage and makes the system
  \ unusable
  \ XXX TODO -- call the G+DOS routines

  BC PUSH  IX PUSH  \ save the Forth registers
  UFIA IX LDP#
  PCAT HOOK
  IX POP  BC POP  \ restore the Forth registers
  NEXT JP
  END-CODE

: CAT  ( ca len -- )  0 0 2SWAP >UFIA  -SCREEN (CAT) +SCREEN  ;

( User interface: Forth RAM-disk )

: DISC>UFIA  ( ca len -- )
  \ Init the User File Information Area
  \ to load or save the Forth RAM-disk.
  \ Zero length is specified, what will make `(<DISK)`
  \ to use the length of the file header.
  \ ca1 len1 = filename
  LO 0 2SWAP >UFIA  ;

: SAVED?  ( ca len -- f n )
  \ Save the Forth RAM-disk to disk
  \ (word named after Abersoft Forth's `SAVET`).
  \ ca len  = filename
  \ f       = error?
  \ n       = error
  DISC>UFIA (>DISK) IOR>ERROR  ;

: SAVED  ( ca len -- )
  \ Save the Forth RAM-disk to disk
  \ (word named after Abersoft Forth's `SAVET`).
  \ ca len = filename
  SAVED? ?ERROR  ;

: LOADD?  ( ca len -- f n )
  \ Load a Forth RAM-disk from disk.
  \ (word named after Abersoft Forth's `LOADT`).
  \ ca len  = filename
  \ f       = error?
  \ n       = error
  DISC>UFIA (<DISK) IOR>ERROR  ;

: LOADD  ( ca len -- )
  \ Load a Forth RAM-disk from disk.
  \ (word named after Abersoft Forth's `LOADT`).
  \ ca len = filename
  LOADD? ?ERROR  ;

: /RUND  ( ca len n -- )
  \ Read a new RAM-disk from disk and load block 'n'.
  \ ca len = filename
  >R EMPTY-BUFFERS INIT-DISC LOADD R> LOAD  ;

: RUND  ( ca len -- )
  \ Read a new RAM-disk from disk and load its first block.
  \ ca len = filename
  1 /RUND ;

( User interface: ordinary files )

: <DISK?  ( a1 len1 ca2 len2 -- f n )
  \ Load a file from disk.
  \ a1 len1   = memory region to load
  \ ca2 len2  = filename
  \ f         = error?
  \ n         = error
  >UFIA (<DISK) IOR>ERROR  ;

: <DISK  ( a1 len1 ca2 len2 -- )
  \ Load a file from disk.
  \ a1 len1   = memory region to load
  \ ca2 len2  = filename
  <DISK? ?ERROR  ;

: >DISK?  ( ca1 len1 ca2 len2 -- f n )
  \ Save a file to disk.
  \ a1 len1   = memory region to save
  \ ca2 len2  = filename
  \ f         = error?
  \ n         = error
  >UFIA (>DISK) IOR>ERROR  ;

: >DISK  ( ca1 len1 ca2 len2 -- )
  \ Save a file to disk.
  \ a1 len1   = memory region to save
  \ ca2 len2  = filename
  >DISK? ?ERROR  ;

: -DISK?  ( ca len -- f n )
  \ Delete a disk file.
  \ ca len  = filename
  \ f       = error?
  \ n       = error
  0 0 2SWAP >UFIA (-DISK) IOR>ERROR  ;

: -DISK  ( ca len -- )
  \ Delete a disk file.
  \ ca len = filename
  -DISK? ?ERROR  ;

( FILE-EXISTS? )

CODE (FILE-EXISTS?)  ( -- f )

  \ XXX FIXME this changes the current drive to 2! why?
 
  BC PUSH  IX PUSH  \ save the Forth registers
  PATCH HOOK
  NSTR2 IX LDP#
  1146 CALL
  E7 OUT  \ page +D out
  IX POP  BC POP  \ restore the Forth registers
  0 HL LDP#  PUSHHL JPNZ
  HL INCP    PUSHHL JP
  END-CODE
  
: FILE-EXISTS?  ( ca len -- f )  FILENAME! (FILE-EXISTS?)  ;

  \ CODE DISK-CAPACITY  ( -- n )

  \   \ n = tracks (+128 if double sided)
  \   \
  \   \ XXX OLD -- not useful, it just reads the DOS variable at
  \   \ 0x2001 or 0x2002, depending on the current drive.

  \   PATCH HOOK
  \   0985 CALL
  \   E7 OUT  \ page +D out
  \   0 H LD#  A L LD  PUSHHL JP

  \   END-CODE

( User interface: screens of the Forth RAM-disk )

: (/LOADD)  ( n ca len -- a len1 ca2 len2 )
  \ Prepare the parameters to load a RAM-disk from disk,
  \ at address of screen n.
  \ Warning: the file will be loaded, no matter its length.
  \ n = first block (1..11)
  ROT FLUSH DISC-SCR 0 2SWAP ;

: /LOADD  ( n ca len -- )
  \ Load a RAM-disk from disk, at address of screen n.
  \ Warning: the file will be loaded, no matter its length.
  \ n = first screen (1..11)
  (/LOADD) <DISK  ;

: /LOADD?  ( n ca len -- error? error )
  \ Load a RAM-disk from disk, at address of screen n.
  \ Warning: the file will be loaded, no matter its length.
  \ n = first screen (1..11)
  (/LOADD) <DISK?  ;

: (/SAVED)  ( n1 n2 ca len -- ca len ca2 len2 )
  \ Prepare the parameters to save a RAM-disk to disk,
  \ from screen n1 to screen n2.
  \ n1 = first screen (1..11)
  \ n2 = last screen (1..11)
  \ ca len = filename
  \ ca2 len2 = memory zone
  2SWAP 1+ DISC-SCR SWAP DISC-SCR DUP ROT SWAP - 2SWAP  ;

: /SAVED  ( n1 n2 ca len -- )
  \ Save a RAM-disk to disk, from block n1 to block n2.
  \ n1 = first block (1..11)
  \ n2 = last block (1..11)
  \ ca len = filename
  (/SAVED) >DISK  ;

: /SAVED?  ( n1 n2 ca len -- error? error )
  \ Save a RAM-disk to disk, from block n1 to block n2.
  \ n1 = first block (1..11)
  \ n2 = last block (1..11)
  \ ca len = filename
  (/SAVED) >DISK?  ;


  \ vim: filetype=abersoftforth

