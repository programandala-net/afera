.( dis )

\ dis.fsb
\ Forth disassembly tool for ZX Spectrum Abersoft Forth

\ Copyright (C) 2015 Marcos Cruz (programandala.net)

\ This file is part of
\ Afera (Abersoft Forth Extensions, Resources and Addons)
\ http://programandala.net/en.program.afera.html

  \ -----------------------------------------------------------
  \ Description
  
  \ This tool prints a partial decoding of the Forth
  \ dictionary, in Z80 assembler format, to be used, in
  \ combination with other tools, to recreate the original
  \ source of Abersoft Forth.

  \ -----------------------------------------------------------
  \ Requirements

  needs +caseins  caseins
  needs /string   strings

  \ -----------------------------------------------------------
  \ History

  \ 2015-05-20: Start, based on `DECODE`.
  \
  \ 2015-05-21: Word header, first pfa listings.
  \
  \ 2015-05-22: First complete disassembling of all
  \ high-level words, using `editor dis-all`.

  \ -----------------------------------------------------------

forth definitions decimal

2 16 thru

( Base printing )

: address  ( a -- )  cr u.  ;

: margin  ( -- )  5 base @ 10 = + spaces  ;

: id.bs  ( nfa -- )
  \ Version of id. without the final space.
  \ This trick is used instead of printing a backspace,
  \ to make sure it works on the printer.
  [ ' noop  cfa ] literal 27506 !  id.
  [ ' space cfa ] literal 27506 !  ;

: bhex.  ( n -- )
  base @ hex swap s->d <# # # #> ." 0x" type base !  ;
: nhex.  ( n -- )
  base @ hex swap s->d <# # # # # #> ." 0x" type base !  ;

( Labels and opcodes )

: def  ( -- )  ." : "  ;

: nfa-label  ( nfa -- )  id.bs ." _nfa"  ;
: lfa-label  ( pfa -- )  nfa id.bs ." _lfa"  ;
: cfa-label  ( cfa -- )  2+ nfa id.bs ." _cfa"  ;
: pfa-label  ( pfa -- )  nfa id.bs ." _pfa"  ;

: defw  ( -- )  ." defw "  ;
: defb  ( -- )  ." defb "  ;

( Special cases )

: dis-compile  ( pfa+n -- pfa+n+2 )
  2+ dup @ ." ," cfa-label  ;

: dis-literal  ( pfa+n -- pfa+n+2 )  2+ dup @ ." ," nhex. ;

: dis-branch  ( pfa+n -- pfa+n+2 )
  \ XXX TODO Create destination label, that will
  \ be put in place when the source is sorted.
  dis-literal  ." ; to " dup dup @ + nhex.  ;

: quoted  ( ca len -- )
  dup bhex. [char] , emit [char] " emit type [char] " emit  ;

: dis-dot-quote  ( pfa+n1 -- pfa+n1+n2 )
  2+ dup address defb dup count quoted dup c@ + 1-  ;

( Special cases dispatcher )

: dis-special-cases  ( pfa+n1 -- pfa+n1 | pfa+n2 )
  dup @ case
          [ ' compile cfa ] literal of  dis-compile    endof
          [ ' lit     cfa ] literal of  dis-literal    endof
          [ ' branch  cfa ] literal of  dis-branch     endof
          [ ' 0branch cfa ] literal of  dis-branch     endof
          [ ' (loop)  cfa ] literal of  dis-branch     endof
          [ ' (+loop) cfa ] literal of  dis-branch     endof
          [ ' (.")    cfa ] literal of  dis-dot-quote  endof
        endcase  ; 

( Checks )

hex

0 constant addr  \ used as local variable

: colon-end?  ( a -- f )
  \ Is the given address the end of a colon definition?
  ' addr !  true
  addr @ [ ' ;s cfa ] literal = ?exit
  addr @ [ ' (;code) cfa ] literal  = ?exit 
  addr 6E04 = ?exit  \ end of COLD
  addr 6DAE = ?exit  \ end of WARM
  addr 6D6A = ?exit  \ end of ABORT
  addr 6C99 = ?exit  \ end of INTERPRET
  addr 6B2A = ?exit  \ end of ERROR
  0= ;

decimal

( Checks )

hex

: colon?     ( pfa -- f )  cfa @ ' : cfa @ =  ;
: constant?  ( pfa -- f )  cfa @ 6348 =  ;
: variable?  ( pfa -- f )  cfa @ 6362 =  ;
: user?      ( pfa -- f )  cfa @ 6374 =  ;

decimal

( Constants, colon definitions )

: dis-value  ( pfa --- )
  \ Print a value (constant, variable or user variable).
  dup address defw @ nhex.  ;

: dis-colon  ( pfa --- )
  \ Print a colon definition.
  begin   dup address  dup colon-end? 0=
  while   defw  dup @ cfa-label dis-special-cases 2+ 
  repeat  defw @ cfa-label  ;

( Name field )

hex

: name  ( ca len -- )
  \ Print the name of the name field,
  \ with the final letter apart with its bit 7 set.
  [char] " emit 2dup 1 /string type [char] " emit
  [char] , emit
  [char] " emit + c@ 7F and emit [char] " emit ." +0x80"  ;

: len-only  ( b1 -- b2 )  3F and  ;

: count-byte  ( b -- )
  \ Print the count byte of the name field,
  \ showing the bound and precedence bits apart.
  dup len-only bhex. ." +0x80" 40 and if  ." +0x40"  then  ;

: name-field  ( pfa -- )
  \ Print the name field.
  nfa dup address dup space nfa-label def
      defb dup c@ count-byte
      dup c@ len-only ." ," name  ;

decimal

( Link, code and parameter fields )

: link-field  ( pfa -- )
  \ Print the link field.
  dup dup lfa address space lfa-label def
  lfa defw @ dup
  if  nfa-label  else  u.  then  ;

: (code-field) ( pfa -- )
  \ Print the content of the code field.
  dup cfa @ 2dup =
  if  drop nfa nfa-label  else  nhex. drop  then  ;
  
: code-field  ( pfa -- )
  \ Print the code field.
  dup cfa dup address space cfa-label def
  defw (code-field)  ;

: parameter-field  ( pfa -- )
  \ Print the parameter field.
  dup address space pfa-label def  ;

( dis )

: header  ( pfa -- )
  cr dup name-field  dup link-field
     dup code-field  parameter-field  ;

: dis  ( pfa --- )
  dup header
  dup colon?    if  dis-colon exit  then
  dup constant? if  dis-value exit  then
  dup variable? if  dis-value exit  then
  dup user?     if  dis-value exit  then
  \ XXX TODO missing word types
  drop ." ; Word type not implemented."  ;

: dis-from  ( nfa -- )
  begin  ( nfa ) pfa dup dis  lfa @ dup 0= ?terminal or
  until  drop  ;

: dis-all  ( -- )  context @ @  dis-from  ;

  \ vim: filetype=abersoftforthafera
