.( DEFER )

\ defer.fsb
\ Deferred words for ZX Spectrum Abersoft Forth

\ Copyright (C) 2015 Marcos Cruz (programandala.net)

\ This file is part of
\ Afera (Abersoft Forth Extensions, Resources and Addons)
\ http://programandala.net/en.program.afera.html

  \ Copying and distribution of this file, with or without
  \ modification, are permitted in any medium without royalty
  \ provided the copyright notice and this notice are
  \ preserved.  This file is offered as-is, without any
  \ warranty.

  \ -----------------------------------------------------------
  \ History

  \ 2015-03-28: Start.
  \
  \ 2015-04-02: Fix.
  \
  \ 2015-07-04: Typo. Simpler `ACTION-OF`.
  \
  \ 2015-07-07: Revised, tested, fixed, simplified (removed
  \ `[IS]` and `<IS>`), documented.

  \ -----------------------------------------------------------

-->

( Create and fetch deferred words )

: (DEFER)  ( -- )
  \ Default behaviour of an uninitialized deferred word:
  \ "Definition not finished".
  20 ERROR ;

: DEFER  ( "name" -- )
  \ Create a deferred word.
  \ Note: using `:` and `;` is more compact and faster
  \ than using `<BUILDS` and `DOES>` in this case.
  [COMPILE] : COMPILE (DEFER) [COMPILE] ;  ;

: DEFER@  ( pfa -- cfa )
  \ pfa = parameter field address of a deferred word
  \ cfa = code field address the deferred word
  \       is set to execute
  @  ;

: DEFERS  ( "name" -- )
  \ Compile the present contents of the deferred word "name"
  \ into the current definition. I.e. this produces static
  \ binding as if "name" was not deferred.
  [COMPILE] ' DEFER@ ,  ; IMMEDIATE

: ACTION-OF  ( Interpretation: "name" -- cfa )
             ( Compilation:    "name" -- )
             ( Runtime:        -- cfa )
  \ "name" = name of a deferred word
  \ cfa = code field address the deferred word
  \       is set to execute
  [COMPILE] '  STATE @ IF    COMPILE DEFER@ 
                       ELSE  DEFER@  THEN  ; IMMEDIATE

-->

( Set deferred words -- version with CFA )

  \ This version uses a cfa (code field address) to set the
  \ deferred words. This version seems a better compromise than
  \ the pfa version above, therefore it's loaded by default.
  \
  \ Note: Since fig-Forth's `'` returns a pfa (parameter field
  \ address) `CFA` must be used to convert it the correspondent
  \ cfa required by `IS` or `DEFER!`. `:NONAME` returns a cfa
  \ (see the module <noname.fsb>), so it can be used directly
  \ with `IS` and `DEFER!`.
  \
  \ Usage examples:

  \   DEFER MYWORD
  \
  \   ' WHATEVER-0 CFA IS MYWORD
  \   MYWORD  \ execute WHATEVER-0
  \
  \   ' WHATEVER-1 CFA ' MYWORD DEFER!
  \   MYWORD  \ execute WHATEVER-1
  \
  \   :NONAME WHATEVER-2 ;  IS MYWORD
  \   MYWORD  \ execute WHATEVER-2
  \
  \   :NONAME WHATEVER-3 ;  ' MYWORD DEFER!
  \   MYWORD  \ execute WHATEVER-3

: DEFER!  ( cfa pfa -- )  !  ;

: IS  ( Interpretation: cfa "name" -- )
      ( Compilation: "name" -- )
  [COMPILE] '  STATE @ IF  COMPILE DEFER!  ELSE  DEFER!  THEN
  ; IMMEDIATE

( Set deferred words -- version with PFA )

  \ This version uses a pfa (parameter field address) to set
  \ the deferred words. 
  \
  \ Note: Since `:NONAME` is written after ANS Forth and so it
  \ returns a cfa (see the module <noname.fsb>), `2+` must be
  \ used to convert it to the pfa required by `IS`.
  \
  \ Usage examples:
 
  \   DEFER MYWORD
  \
  \   ' WHATEVER-0 IS MYWORD
  \   MYWORD  \ execute WHATEVER-0
  \
  \   ' WHATEVER-1 ' MYWORD DEFER!
  \   MYWORD  \ execute WHATEVER-1
  \
  \   :NONAME WHATEVER-2 ;  2+ IS MYWORD
  \   MYWORD  \ execute WHATEVER-2
  \
  \   :NONAME WHATEVER-3 ;  2+ ' MYWORD DEFER!
  \   MYWORD  \ execute WHATEVER-3

: DEFER!  ( pfa1 pfa2 -- )  SWAP CFA SWAP !  ;

: IS  ( Interpretation: cfa "name" -- )
      ( Compilation: "name" -- )
  [COMPILE] '  STATE @ IF  COMPILE DEFER!  ELSE  DEFER!  THEN
  ; IMMEDIATE

  \ vim: filetype=abersoftforthafera
