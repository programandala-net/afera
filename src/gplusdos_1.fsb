.( G+DOS support -- part 1 )

\ gplusdos_1.fsb
\ G+DOS support for ZX Spectrum Abersoft Forth (part 1)

\ Copyright (C) 1988,1994,2015 Marcos Cruz (programandala.net)

\ This file is part of
\ Afera (Abersoft Forth Extensions, Resources and Addons)
\ http://programandala.net/en.program.afera.html

  \ -----------------------------------------------------------
  \ History

  \ 2015-03-13: Start, based on code already written in 1988
  \ and 1994.
  \
  \ 2015-04-01: Checks.
  \
  \ 2015-04-02: First succesful compilation, after some fixes
  \ in the assembler. Some words renamed. New: alternative
  \ words that don't use `?ERROR` but return the error
  \ parameters.
  \
  \ 2015-04-07: Renamed to <gdos.fsb> (formerly
  \ <gplusdos.fsb>).
  \
  \ 2015-04-14: New: the list of hooks has been completed;
  \ `GDOS?` and `G+DOS?+'.
  \
  \ 2015-04-16: Change: `GDOS?` and `G+DOS?+' are removed.  It
  \ doesn't worth the effort to make the code compatible with
  \ both GDOS and G+DOS, because all low level operations
  \ should be duplicated. Even the word `GDOS?` should use a
  \ different port to page the interface out, DISCiPLE or +D,
  \ depending on its own result!  Only G+DOS will be supported.
  \ File renamed to <g+dos_1.fsb>.
  \
  \ 2015-05-08: Renamed to <gplusdos_1.fsb>, because of an
  \ issue with Makefile.
  \
  \ 2015-05-12: Improvement: `DEVICE` is not a variable to
  \ update UFIA with anymore, but the address of the
  \ correspondent byte in UFIA, faster and shorter.

FORTH DEFINITIONS DECIMAL

10 CONSTANT /FILENAME  \ max filename length

2 6 THRU

( UFIA: User File Information Area)

24 CONSTANT /UFIA  /UFIA BUFFER: UFIA  UFIA /UFIA ERASE

  \ Note: The original field names are used, except `DEVICE`,
  \ whose original name is "LSTR1".

UFIA      CONSTANT DSTR1 \ drive: 1 or 2
UFIA 1+   CONSTANT FSTR1 \ program number
  \ XXX OLD -- not needed
  \ UFIA 2+   CONSTANT SSTR1 \ stream number
UFIA 3 +  CONSTANT DEVICE \ device: "D" or "d"
UFIA 4 +  CONSTANT NSTR1 \ directory description
UFIA 5 +  CONSTANT NSTR2 \ file name
UFIA 15 + CONSTANT HD00  \ file type
UFIA 16 + CONSTANT HD0B  \ file length
UFIA 18 + CONSTANT HD0D  \ file start address
  \ XXX OLD -- not needed
  \ UFIA 20 + CONSTANT HD0F  \ BASIC length without variables
  \ UFIA 22 + CONSTANT HD11  \ BASIC autorun line

CHAR d DEVICE C! \ "d" or "D"

  \ These variables hold a copy of the HD0B and HD0D UFIA
  \ fields. They are used by `(<DISK)`.
0 VARIABLE FILE-LENGTH
0 VARIABLE FILE-ADDRESS

( File types, directory descriptions and hook codes)

  \ XXX TODO move all this constants to another file, as
  \ reference. They ocuppy a lot and most of them are not
  \ necessary.

  \ File types

0 CONSTANT BASIC-FILETYPE  1 CONSTANT DATA-ARRAY-FILETYPE
2 CONSTANT STRING-ARRAY-FILETYPE  3 CONSTANT CODE-FILETYPE

  \ Directory descriptions

  01 CONSTANT BASIC-FILE      02 CONSTANT DATA-ARRAY
  03 CONSTANT STRING-ARRAY    04 CONSTANT CODE-FILE
  05 CONSTANT SNAPSHOT-48K    06 CONSTANT MICRODRIVE-FILE
  07 CONSTANT SCREENS$-FILE   08 CONSTANT SPECIAL-FILE
  09 CONSTANT SNAPSHOT-128K   10 CONSTANT OPENTYPE-FILE
  11 CONSTANT EXECUTE-FILE                              HEX

  \ Hook codes

33 CONSTANT HXFER 34 CONSTANT OFSM  35 CONSTANT HOFLE
36 CONSTANT SBYT  37 CONSTANT HSVBK 38 CONSTANT CFSM
39 CONSTANT PNTP  3A CONSTANT COPS  3B CONSTANT HGFLE
3C CONSTANT LBYT  3D CONSTANT HLDBK 3E CONSTANT WSAD
3F CONSTANT SAD   40 CONSTANT REST  41 CONSTANT HERAZ
42 CONSTANT COPS2 43 CONSTANT PCAT  44 CONSTANT HRSAD
45 CONSTANT HWSAD 46 CONSTANT OTFOC 47 CONSTANT PATCH   DECIMAL

( Error checking)

: IOR>ERROR  ( ior -- f n )

  \ Convert a DOS ior to a Forth error number.

  \ ior = the AF register returned by a DOS command:
  \     bit 0     = set: error
  \     bits 8-14 = error code
  \     bit 15    = set: ZX Spectrum error; unset: DOS error
  \ f = error?
  \ n = error number:
  \     n<0  = ZX Spectrum error number (negative)
  \     n>99 = DOS error number (plus 100)

  DUP 1 AND    \ error?
  SWAP 255 /   \ error code
  DUP 128 AND  \ ZX Spectrum error?
  IF  MINUS  ELSE  100 +  THEN   ;

: ?DOS-ERROR  ( ior -- )
  \ ior = the AF register returned by a DOS command:
  \   bit 0     = set: error
  \   bits 8-14 = error code
  \   bit 15    = set: ZX Spectrum error; unset: DOS error
  IOR>ERROR ?ERROR  ;

( Drive)

  \ XXX TODO -- check if this works with `CAT` when available

CODE DRIVE@  ( -- n )
  \ Get the current drive (1 or 2).
  BC PUSH  IX PUSH  \ save the Forth registers
  PATCH HOOK
  \ 3E01 LDA  \ XXX OLD
  3ACE LDA  \ XXX NEW
  \ XXX TODO check this method:
  \ bit 0 of 3DD1
  E7 OUT  \ page +D out
  IX POP  BC POP  \ restore the Forth registers
  0 H LD#  A L LD  PUSHHL JP  END-CODE

CODE DRIVE!  ( n -- )
  \ Set the current drive (1 or 2).
  HL POP
  BC PUSH  IX PUSH  \ save the Forth registers
  \ XXX OLD
  \ HL PUSH
  \ PATCH HOOK  HL POP  L A LD  3E01 STA
  \ E7 OUT  \ page +D out
  \ XXX NEW
  L A LD  21 HOOK
  IX POP  BC POP  \ restore the Forth registers
  NEXT JP  END-CODE

( UFIA manipulation)

: -FILENAME  ( -- )
  \ Blank the filename in UFIA.
  NSTR2 /FILENAME BLANKS  ;

: FILENAME!  ( ca len -- )
  \ Store a filename into UFIA.
  \ ca len = filename
  -FILENAME /FILENAME MIN NSTR2 SWAP CMOVE  ;

: >UFIA  ( a1 len1 ca2 len2 -- )
  \ Set the UFIA.
  \ a1 len1   = memory region
  \ ca2 len2  = filename
  3 HD00 C!  4 NSTR1 C!  \ code filetype and dir description
  FILENAME!
  DUP HD0B !  FILE-LENGTH !
  DUP HD0D !  FILE-ADDRESS !
  DRIVE@ DSTR1 C!  ;

  \ vim: filetype=abersoftforth
