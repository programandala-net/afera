\ afera.fsb
\ Main file of the Afera library for ZX Spectrum Abersoft Forth

\ Copyright (C) 2015 Marcos Cruz (programandala.net)

\ This file is part of
\ Afera (Abersoft Forth Extensions, Resources and Addons)
\ http://programandala.net/en.program.afera.html

  \ -----------------------------------------------------------
  \ Description

  \ This is the main file of the Afera library.
  \
  \ It defines words required by other modules or that are
  \ considered essential;
  \
  \ patches the system with faster code that doesn't use
  \ additional memory;
  \
  \ fixes most of the known bugs of the system.

  \ -----------------------------------------------------------
  \ History

  \ See at the end of the file.

  \ -----------------------------------------------------------
  \ fsb directives

  \ The following #vim directive, processed by fsb, translate
  \ every "\*" into the copyright symbol code in the ZX
  \ Spectrum character set (0x7F):

  \ #vim %substitute@\\\*@\=nr2char(127)@g

( Line comments, bug fixes)

." Afera" CR  FORTH DEFINITIONS  HEX

  \ ............................................
  \ Line comments

: \  ( "ccc<newline>" -- )
  IN @ DUP C/L > IF  B/BUF SWAP MOD  ELSE  C/L SWAP -  THEN
  IN +!  ; IMMEDIATE

: .(  ( "ccc<paren>" -- )
  29 ( paren ) TEXT PAD COUNT TYPE  ; IMMEDIATE

  \ ............................................
  \ Fix the "11263" bug

  \ The length of the RAM-disk must be 11264 (0x2C00), `HI LO -
  \ 1+`, not 11263 (0x2BFF), `HI LO -`.

  \ Length of the RAM-disk:
HI LO - 1+ CONSTANT /DISC

  \ Patch the load tape header (no need to patch also the save
  \ header, because the load header is copied to the save
  \ header during the tape operations) and `INIT-DISC`:
/DISC DUP 75E6 0B + !   ' INIT-DISC 06 + !

  \ ............................................
  \ Fix the `2OVER` bug

  \ `2OVER` must do `R> R>` at the end, not `>R >R`
  \
  \ As Don Thomasson's _Advanced Spectrum Forth_ (1984) says
  \ (page 131), early versions of Abersoft Forth contained an
  \ error in the word `2OVER`, that hangs the system. So just
  \ in case:

' R> CFA ' 2OVER 0A + 2DUP ! 2+ !

  \ ............................................
  \ Fix the `EXIT` bug

  \ `EXIT` must do `R> DROP`, not `>R DROP`
  \
  \ Even Don Thomasson's _Advanced Spectrum Forth_ (1984) shows
  \ the wrong definition of `EXIT` (page 131)... and with the
  \ following notice: "This word needs to be used with extreme
  \ care." Indeed, because it crashes the system. The fix is
  \ easy:

' R> CFA ' EXIT !

  \ ............................................
  \ Fix the `COLD` bug

  \ The word `COLD` has a subtle bug: it inits `PREV` and `USE`
  \ not with `FIRST`, the constant that holds the start address
  \ of the first disk buffer, but with its default value! This
  \ must be fixed in order to move the disk buffers (what does
  \ the <lowersys.fsb> module).

' NOOP CFA ' COLD 02 + !  ' FIRST CFA ' COLD 04 + !
' NOOP CFA ' COLD 0A + !  ' FIRST CFA ' COLD 0C + !

  \ ............................................
  \ Safer `MON`

  \ The word `MON` does nothing when the address 0x5CB0
  \ contains a value other than 0. It seems an undocumented way
  \ to deactivate the exit to BASIC.  0x5CB0 is an unused
  \ system variable in ZX Spectrum, except the +3 model, where
  \ it's NMIADD.

  \ Make `MON` to return to BASIC, without checking NMIADD:
763D ' MON CFA !

  \ ............................................
  \ Bugs not fixed yet

  \ `MESSAGE` does not work with odd negative numbers: they
  \ print the content of an unknown memory zone. The problem is
  \ the calculation done by `(LINE)`. In fact `*/MOD`, `MOD`
  \ and `/MOD`, with certain negative values, return different
  \ results in Abersoft Forth and other Forth systems that have
  \ been tested (some of them are fig-Forth).  The problem
  \ seems to be in Abersoft Forth's `U/MOD`, written in
  \ assembler.
  \
  \ Sometimes the delete key causes invisible corruption of the
  \ command line, and words written after it are not
  \ recognized.
  \
  \ `INK` has a bug that causes `PLOT` to use 0 instead the
  \ proper attribute in most cases. The alternative definition
  \ provided in <color.fsb> works fine.

DECIMAL -->

( Data stack and conditional compilation)

HEX

  \ ............................................
  \ Data stack

CREATE NIP  ( x1 x2 -- x2 )
  \ SWAP DROP
  \ pop hl / pop de / jp PUSHHL
  E1 C, D1 C, C3 C, PUSHHL ,  SMUDGE

CREATE TUCK  ( x1 x2 -- x2 x1 x2 )
  \ SWAP OVER
  \ pop hl / pop de / push hl / jp PUSHDE
  E1 C, D1 C, E5 C, C3 C, PUSHDE ,  SMUDGE

: DEPTH  ( -- n )  SP@ S0 @ - -2 /  ;

  \ ............................................
  \ Conditional compilation

: [DEFINED]  ( "name" -- f )
  -FIND DUP IF  NIP NIP  THEN  ; IMMEDIATE

: [UNDEFINED]  ( "name" -- f )
  [COMPILE] [DEFINED] 0=  ; IMMEDIATE

  \ The following words provide a simple alternative to
  \ `[IF]`, `[ELSE]` and `[THEN]`.

: ?--> ( f -- )  IF  [COMPILE] -->  THEN  ; IMMEDIATE
: ?\ ( f "ccc<newline>" -- )  IF  [COMPILE] \
  THEN  ; IMMEDIATE  DECIMAL -->

( .CPU GREETING )

  \ The original word `.CPU` prints "48K SPECTRUM".  It's
  \ changed to "ZX Spectrum". A `NOOP` is added at the end; it
  \ will be substituted by `.CPUK` later, to show the memory of
  \ the specific model.

HEX HERE  0B C, 5A C, 58 C, BL C, 53 C, 70 C, 65 C, 63 C, 74 C,
72 C, 75 C, 6D C, ' NOOP CFA ,
DUP ' .CPU 2+ OVER HERE SWAP - CMOVE DP !

  \ New messages show after a cold start.

: .SYS         ( -- )  ." Spectrum fig-Forth"  ;
: .SYS-AUTHOR  ( -- )  ." v1.1A \* 1983 Abersoft" CR
                       ." v1.1C+Afera \* 2015 Marcos Cruz" CR
                       ." (programandala.net)"  ;

: GREETING  ( -- )  .SYS CR .SYS-AUTHOR CR  ;

  \ As the message shows, the current user version is "C".
  \ Store it into its standard fig-Forth address.

67 DUP 10 +ORIGIN C!

  \ `ABORT` must be patched to execute `GREETING` after `CLS`,
  \ and then the rest.  The new code is shorter than the
  \ original one, because the old messages were hardcoded in
  \ the word.

HEX ' GREETING    CFA 6D62 !  ' FORTH CFA 6D64 !
    ' DEFINITIONS CFA 6D66 !  ' QUIT  CFA 6D68 !

  \ ............................................
  \ Cosmetic patches

  \ No `CLS` in `INDEX`, no `DECIMAL` in `LIST`
' NOOP CFA ' INDEX !
' NOOP CFA ' LIST !
         2 ' LIST 23 + !    \ smaller margin in `LIST`

DECIMAL -->

( Make the first screen usable )

  \ Abersoft Forth doesn't allow to compile sources from the
  \ first screen (number 0) of its RAM-disk, by convention
  \ reserved to comments. But that is a waste of memory.  This
  \ patch solves that problem.
  \
  \ After the patch, screen numbers will be 1..11 instead of
  \ 0..10. Or 1..16 after compiling the <16kramdisks.fsb>
  \ module.

  \ The only word that has to be patched is `R/W`, the
  \ fig-Forth standard disk read/write linkage, a system
  \ dependent word. Its definition in Abersoft Forth is the
  \ following:

  \ : R/W  ( a n f -- )
  \   \ a = source or destination block buffer
  \   \ n = sequential block number on disk
  \   \ f = 0 for disk write, 1 for read
  \   >R  B/BUF * LO +
  \   DUP HI > LIT 6 ?ERROR  \ out of upper bound?
  \   R>  \ disk read?
  \   IF  SWAP  THEN  B/BUF CMOVE  ;

  \ The calculation `B/BUF *` must be changed. The chosen
  \ method is to substitute the `*` with a new word, `BUF*`:

B/SCR B/BUF * CONSTANT /SCR  \ bytes per screen (1024)

  \ XXX OLD
  \ : BUF*  ( n1 +n2 -- +n3 )

  \   \ Calculate the relative address +n3 of disk block n1 in the
  \   \ Forth RAM-disk. Give error #6 when the requested disk block
  \   \ n1 belongs to the first screen of the RAM-disk.  Finally
  \   \ update the result one screen below.

  \   \ n1 = number of sequential disk block
  \   \ +n2 = bytes per block buffer, returned by `B/BUF`
  \   \ +n3 = offset in the RAM-disk (from 0 to `HI B/BUF -`)

  \   * DUP /SCR U< 06 ?ERROR  /SCR -  ;

  \   \ Patch `R/W` with `BUF*` and update `BLK` to prevent the
  \   \ current screen to be loaded twice. Warning: Both operations
  \   \ must be done on the same line, to prevent them from being
  \   \ in two different blocks of the screen.
  \   ' BUF* CFA 7223 !  B/SCR BLK +!

: DISC-BLOCK  ( n -- a )

  \ Calculate the address of disk block n in the Forth RAM-
  \ disk.  Give error 6 when the requested disk block is out of
  \ range.
  \
  \ This word works with the default 11-KiB RAM disk and also
  \ with the 16-KiB paged RAM-disks that can be used with the
  \ 128K model (installed by the <16kramdisks.fsb> module).
  \
  \ The disk block number is adjusted with `OFFSET`, because
  \ the result address is the same, no matter what the current
  \ drive is.

  \ n = number of sequential disk block
  \ a = address in the RAM-disk (when paged in)

  OFFSET @ -
  B/BUF * DUP /SCR U< 6 ?ERROR
  LO + /SCR - DUP HI > 6 ?ERROR  ;


: (R/W)  ( a1 a2 f -- )

  \ Read to or write from the new RAM-disk.

  \ a1 = buffer address
  \ a2 = address in the RAM-disk
  \ f =  0 for writing; 1 for reading

  \ This word is created with `;S` and `NOOP` in order to make
  \ it easier for the <16kramdisks.fsb> module to convert it
  \ into the 128K version, that needs four more commands.

  IF  SWAP  THEN  B/BUF CMOVE [COMPILE] ;S NOOP NOOP NOOP ;

  \ Compile the new code of `R/W`.

HERE  ' >R CFA , ' DISC-BLOCK CFA , ' R> CFA , '
      (R/W) CFA , ' ;S CFA ,

  \ Patch `R/W` with the new code.  Update `BLK` to prevent the
  \ current screen to be loaded twice, because of the patch.
  \ Finally, free the dictionary space used by the patch.
  \
  \ Warning: `CMOVE` and `B/SCR BLK +!` must be on the same
  \ line, otherwise there's a chance they could be in different
  \ blocks of the screen, what would cause trouble.

DUP ' R/W OVER SWAP OVER HERE SWAP - CMOVE  B/SCR BLK +!  DP !

  \ Change the error 9 caused by `0 LOAD` ("Trying to load from
  \ screen 0") to error 6 ("Out of RAM-disk range"), what seems
  \ more logical now, because there's no screen 0 anymore.

6 ' LOAD 8 + !

DECIMAL -->

( Operators)

: CHAR  ( "name" -- c )  BL WORD HERE 1+ C@  ;
: [CHAR]  ( "name" -- c )  CHAR [COMPILE] LITERAL  ; IMMEDIATE

: BOUNDS  ( a1 len1 -- a2 a1 )  OVER + SWAP  ;  HEX

CREATE 1- ( n1 -- n2 ) E1 C, 2B C,  C3 C, PUSHHL , SMUDGE
  \ pop hl / dec hl / jp PUSHHL

CREATE 2- ( n1 -- n2 ) E1 C, 2B C, 2B C, C3 C, PUSHHL , SMUDGE
  \ pop hl / dec hl / dec hl / jp PUSHHL

  \ Patch CFA to use the Z80 code of `2-`,
  \ faster than the original colon definition `2 -`:
' 2- ' CFA CFA !

  \ In Abersoft Forth `1+` and `2+` are colon words.  The
  \ following code patches the original definitions with 50%
  \ faster Z80 code, without using dictionary space: The pfa of
  \ the original words is 12 bytes long, enough for the new
  \ code.
  \
  \ The new code can not be compiled directly into the
  \ destination address, by pointing `DP` to the target pfa,
  \ because `WORD` uses `HERE` as buffer (and first it does
  \ `HERE 34 SPACES`), what would corrupt the dictionary.
  \ That's why the code is compiled at `HERE` and then moved.
  \ Beside, some of the words internally used during the
  \ patching (`WORD` and others) call `1+` or `2+`.  That's why
  \ the original names can be "ticked" only before patching the
  \ original code; and the new code, including the new cfa,
  \ must overwrite the old definition in one single operation,
  \ with `CMOVE`.

HERE ' 1+  ( a pfa )  DUP ,   \ the cfa will point to pfa:
  \ pop hl / inc hl / jp PUSHHL
  E1 C, 23 C, C3 C, PUSHHL ,
  \ Overwrite the word and restore `DP`:
  CFA OVER SWAP OVER HERE SWAP - CMOVE  ( a ) DP !

HERE ' 2+  ( a pfa )  DUP , \ the cfa will point to pfa:
  \ pop hl / inc hl / inc hl / jp PUSHHL
  E1 C, 23 C, 23 C, C3 C, PUSHHL ,
  \ Overwrite the word and restore `DP`:
  CFA OVER SWAP OVER HERE SWAP - CMOVE  ( a ) DP !  DECIMAL -->

( Screens and RAM-disks )

  \ ............................................
  \ Standard or common usage extensions

: THRU  ( n1 n2 -- )  1+ SWAP DO  I LOAD  LOOP  ;
: +LOAD  ( n -- )  BLK @ B/SCR / + LOAD  ;
: +THRU  ( n1 n2 -- )  1+ SWAP DO  I +LOAD  LOOP  ;

  \ ............................................
  \ Load from tape and compile Forth RAM-disks

  \ The following words make it possible to chain several Forth
  \ RAM-disk files from tape, allowing the automatic
  \ compilation of sources larger than 11 blocks.

  \ Read a new RAM-disk from tape and load screen 'n'.
: /RUNT  ( n -- )  EMPTY-BUFFERS INIT-DISC LOADT LOAD ;

  \ Read a new RAM-disk from tape and load its first screen.
: RUNT  ( -- )  1 /RUNT  ;

: /INIT-DISC  ( n -- )
  \ XXX TMP -- not definitive.
  \ Blank the init disc from the given block number.
  /SCR * DUP >R /DISC SWAP - LO R> + SWAP BLANKS  ;

11 CONSTANT SCR/DR  \ screens per drive (RAM-disk)

: DISC-SCR  ( n -- a )
  \ Address of screen n in the Forth RAM-disk;
  \ error 6 if not in range.
  \ n = 1..11 for 48K
  \     1..16 for 128K (with the <16kramdisks.fsb> module)
  1- DUP SCR/DR U< 0= 6 ?ERROR  /SCR * LO +  ;  -->

( EXTEND SYSTEM )

  \ System words have been patched with new words. Those new
  \ words should not be removed, e.g. by `COLD`, otherwise the
  \ system would crash when their space will be overwritten. So
  \ the dictionary must be protected at this point.

: EXTEND  ( -- )

  \ XXX OLD
  \ `EXTEND` sets the initial values of `DP` and `FENCE`
  \ (restored by `COLD`) to the current value of `FENCE`.
  \ FENCE @  DUP 1C +ORIGIN !  1E +ORIGIN !
  \ LATEST 0C +ORIGIN ! ;

  LATEST 12 +ORIGIN !  HERE 28 +ORIGIN !  HERE 30 +ORIGIN !
  \ XXX or other vocabulary and `6 +` instead of `8 +`:
  HERE FENCE !  ' FORTH 8 + 32 +ORIGIN !  ;


: SYSTEM ( -- a len )

  \ Prepare the system in order to save a copy.  Return its
  \ start address and length, to be used as parameters for the
  \ tape or disk saving commands.

  \ XXX TODO accept a boot word to patch `COLD` with.

  EXTEND  0 +ORIGIN SIZE 10 + ;

EXTEND CR GREETING

  \ -----------------------------------------------------------
  \ Temporary code during the development

  \ : CLS0  ( -- )  0 PAPER 4 INK 0 BORDER CLS  ;

  \ -----------------------------------------------------------
  \ History

  \ 1985-1987:
  \
  \ Some words written to extend Abersoft Forth: `\`, `INVERT`,
  \ `>=`, `<=`, `<>`, `SGN` (after the manual), `NOR`, `NAND`,
  \ `NXOR`, `DEPTH`, `PICK`, `DRAWL`, `RDRAW`, `RDRAWL`...
  \
  \ 2015-03: Start of the Afera library. New words: `CHAR`,
  \ `[CHAR]`, `PARSE-TEXT`, `PARSE-NAME`, `SLIT`, `S,`,
  \ `SLITERAL`, `.(`, `(S)`, `S"`, `S'`, `TLOAD`, `RUNT`,
  \ `BOUNDS`, `NIP`, `[DEFINED]`, `BYE`, `UDG!`, `AKEY`,
  \ `THRU`, `+LOAD` (after Gforth), `+THRU` (after Gforth),
  \ `RDROP`, `R@`, `RDEPTH`, `SGN`, `(after`, `Gforth)`,
  \ `RECURSE`, `ROLL` (after Gforth), `XY>ATTRA`, `[DEFINED]`.
  \
  \ 2015-03-28:
  \
  \ The graphics and strings extensions are moved to their own
  \ files. Fixes of Abersoft Forth's bugs: the RAM-disk length
  \ and `EXIT`. Fix: `RDROP` was wrong.  New: `/INIT-DISC`,
  \ `TUCK`.
  \
  \ 2015-03-29:
  \
  \ `TRUE`, `FALSE`, `ON`, `OFF`, `-ROT`, `?EXIT` (after
  \ Gforth), `ALIAS` (for code words only), `HERE:` (Afera
  \ specific), `BUFFER:` (after Forth-2012). The renamings
  \ (`BYE`, `-DUP`, `VLIST`) are moved to an own file.
  \
  \ 2015-03-30:
  \
  \ `.(` is moved from the strings module, in order to use it
  \ at block headers. New: `MS`.
  \
  \ 2015-03-31:
  \
  \ New: `INKEY?`, `?RSTACK`.
  \
  \ Change: `TLOAD` is combined into `RUNT`.
  \
  \ Fix: Now `RUNT` clears the return stack.
  \
  \ Fix: `+LOAD`: the problem was `BLK` doesn't hold the block
  \ number in Abersoft Forth: it has to be divided by `B/SCR`
  \ (a constant that returns 8). The definitions of `LOAD` and
  \ `-->`, from Don Thomasson's book "Spectrum Advanced Forth",
  \ gave the definitive clue.
  \
  \ Change: simpler definitions of `>=` and `<=`; `NEGATE` is
  \ removed because it already exists, but it's called `MINUS`.
  \
  \ 2015-04-01:
  \
  \ Change: Now `RUNT` halts if Break is pressed.  The problem
  \ was the Fuse emulator, when the TAP file is finished,
  \ rewinds it, and this behaviour is not configurable.
  \ Therefore loading a single module of the library was
  \ impossible: it loaded itself in an endless loop.  This
  \ change solves this problem to some extent, while still
  \ keeping `RUNT` for chain loading. A better solution is
  \ searched.
  \
  \ New: Patches that make it possible to use the whole screen.
  \
  \ New: `RND`, adapted from Bertie, the demo program bundled
  \ with Abersoft Forth.
  \
  \ 2015-04-02:
  \
  \ Fix: Now `AT` works on line 32. The solution was to use
  \ `>CHAN` (conversion of `TCH` from Lennart Benschop's
  \ Spectrum Forth-83) instead of. `EMIT`.
  \
  \ Improvement: `RUNT` checks `DEPTH` instead of the Break
  \ key.
  \
  \ New: `VALUE`, `TO`, `[TO]` and `<TO>`.
  \
  \ 2015-04-03:
  \
  \ Improvement: `RUNT` checks also `BLK`; this make it
  \ possible to use it manually to load the next RAM-disk.
  \
  \ Change: `CHAR` and `[CHAR]` are moved here from the strings
  \ module.
  \
  \ 2015-04-08:
  \
  \ New (moved from the assembler): `2*`, `2-`, 1-`.
  \
  \ 2015-04-09:
  \
  \ New: `/BLOCK`.
  \
  \ Change: `AKEY` and `INKEY?` are moved to their own file
  \ <key.fsb>.
  \
  \ 2015-04-15:
  \
  \ Change: `VALUE` and related words are moved to <value.fsb>;
  \ all words related to whole screen support are moved to
  \ <plusscreen.fsb>; `ALIAS` is moved to <alias.fsb>; `CELL`
  \ and related words are moved to <cell.fsb>; `RUNT` and
  \ `?RUNT` are moved to <runt.fsb>; `HERE:` and `BUFFER:` are
  \ moved to <buffercol.fsb>.
  \
  \ 2015-04-16:
  \
  \ Change: `2*`, `2-`, `1-`, `PICK`, `NIP` and `TUCK` are
  \ rewritten in Z80.
  \
  \ New: `2/`, written in Z80 (still not working fine with
  \ negative numbers).
  \
  \ Change: `FALSE`, `TRUE`, `ON` and `OFF` are moved to
  \ <flags.fsb>.
  \
  \ 2015-04-17: `RUNT` moved back; its current definition is
  \ useful to write loaders.
  \
  \ 2015-04-21: New: `UNLOOP`.
  \
  \ 2015-04-23: New: `/RUNT`, as a factor of `RUNT`.  Fix: `2/`
  \ now works fine with negative numbers; the bug was a wrong
  \ relative jump.
  \
  \ 2015-04-25: Change: `UNLOOP` and `-ROT` are rewritten in
  \ Z80.
  \
  \ 2015-04-30: Change: `BLOCK>A` is renamed to `'BLOCK`.
  \
  \ 2015-05-02: Change: `[DEFINED]`, `[UNDEFINED]`, `?-->` and
  \ `?;S` are moved here from the conditional compilation draft
  \ module. Change: `-ROT`, `ROLL` and `PICK` are moved to
  \ their own files.
  \
  \ 2015-05-03: New: 'RUNTS'. New: Patch to make screen #0
  \ usable for compiling.
  \
  \ 2015-05-03: `UNLOOP` is moved to its own file.
  \
  \ 2015-05-05: `2/` and `2*` are moved to their own files.
  \
  \ 2015-05-06:
  \
  \ `1+` and `2+` are moved here from their own files, because
  \ now they patch the original slower definitions without
  \ using any dictionary space.
  \
  \ Change: `/BLOCK` is renamed as `/SCR`, to avoid confusion
  \ with fig-Forth disk blocks.
  \
  \ New: `CFA` is patched with `2-`, for speed.
  \
  \ 2015-05-08: `RUNTS` is removed. The new modules
  \ <loader.fsb>, <loaded.fsb> and <loaded_execute.fsb> make it
  \ unnecessary.
  \
  \ 2015-05-10: Change: `'BLOCK` renamed to `'SCR`.
  \
  \ 2015-05-11: `SGN`, `RECURSE` and `?EXIT` are moved to their
  \ own files.
  \
  \ 2015-05-12:
  \
  \ `<>`, is moved to its own file and rewritten in Z80. `?(`
  \ is moved to drafts, because it can not work yet, without
  \ `EVALUATE` or other method.
  \
  \ Change: `'SCR` renamed to `DISC-SCR`, after `DISC-BLOCK` in
  \ the <16kramdisks.fsb> module.
  \
  \ 2015-05-13: `?;S` is moved to the drafts directory, until a
  \ solution is found for it.  Three unused operators are
  \ removed.
  \
  \ New: Temporary version of `48K?` (memory paging can not be
  \ used without <lowersys.fsb>). `GREETING` and related words.
  \ `EXTEND` to protect the changes from `COLD`.
  \
  \ 2015-05-14: File renamed <afera.fsb>. Several changes. New
  \ approach... The system will be lowered by default, in order
  \ to use memory paging to detect the available memory.
  \
  \ 2015-05-15: Simpler `GREETING`.
  \
  \ -----------------------------------------------------------

  \ vim: filetype=abersoftforth
