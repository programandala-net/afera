.( Strings )

\ strings.fsb
\ Strings for ZX Spectrum Abersoft Forth

\ Copyright (C) 2015 Marcos Cruz (programandala.net)

\ This file is part of
\ Afera (Abersoft Forth Extensions, Resources and Addons)
\ http://programandala.net/en.program.afera.html

  \ -----------------------------------------------------------
  \ Requirements

NEEDS MOVE    move
NEEDS FALSE   flags
NEEDS PICK    pick

  \ -----------------------------------------------------------
  \ History
  
  \ 2015-03: `CHAR`, `[CHAR]`, `PARSE-TEXT`, `PARSE-NAME`,
  \ `SLIT`, `S,`, `SLITERAL`, `.(`, `(S)`, `S"`, `S'`.
  \
  \ 2015-03-28: File created with code extracted from the main
  \ file of the library. New: `STR=`, after Gforth.
  \
  \ 2015-03-29: New: 'PLACE' and '+PLACE', after Gforth;
  \ circular string buffer and related tools, adapted from csb8
  \ (http://programandala.net/en.program.csb8.html).
  \
  \ 2015-03-30: `.(`is moved to the main extend module, in
  \ order to use it at block headers.
  \
  \ 2015-03-31: New: `/STRING`.
  \
  \ 2015-04-03: Change: `CHAR` and `[CHAR]` are moved to the
  \ main file of the library. 
  \
  \ 2015-04-14: New: `CMOVE>`, `MOVE`.
  \
  \ 2015-05-15: `CMOVE>` and `MOVE` are moved to <move.fsb>.
  \ `2>R` and `2>R` are already available and used.
  \ Improvement: The circular string buffer is configurable; it
  \ must be initialized.
  \
  \ 2015-05-17: `NEEDS` used.
  \
  \ 2015-05-18: The circular string buffer is moved to its own
  \ file.  This way, applications that just need transient
  \ strings do not waste the dictionary space occupied by the
  \ code of the buffer.

2 4 THRU 

( PARSE-TEXT PARSE-NAME S, SLITERAL PLACE +PLACE /STRING )

: PARSE-TEXT  ( c "ccc<c>" -- ca len )  TEXT PAD COUNT  ;
: PARSE-NAME  ( "name" -- ca len )  BL PARSE-TEXT  ;

: SLIT  ( -- ca len ) R COUNT DUP 1+ R> + >R  ;
: S,  ( ca len -- ) SWAP HERE ROT CMOVE 1+ ALLOT  ;
: SLITERAL  ( ca len -- ) COMPILE SLIT S,  ; IMMEDIATE

: PLACE  ( ca1 len1 ca2 )  2DUP C! 1+ SWAP MOVE  ;
: +PLACE  ( ca1 len1 ca2 )
  2DUP C@ + OVER C!  DUP C@ 1+ + SWAP MOVE  ;

: /STRING  ( ca1 len1 n -- ca2 len2 ) 
  DUP >R - SWAP R> + SWAP  ;

( S" S' )

: (S) ( Compilation: c "ccc<c>" -- ) ( Run-time:  -- ca len )
  STATE @
  IF    COMPILE SLIT WORD HERE C@ 1+ ALLOT
  ELSE  PARSE-TEXT  THEN  ;

: S"  ( Compilation: "ccc<">" -- ) ( Run-time:  -- ca len )
  [CHAR] " (S)  ; IMMEDIATE

: S'  ( Compilation: "ccc<'>" -- ) ( Run-time:  -- ca len )
  [CHAR] ' (S)  ; IMMEDIATE

( LENGTHS STR= )

: LENGTHS  ( ca1 len1 ca2 len2 -- ca1 len1 ca2 len2 len1 len2 )
  2 PICK OVER  ;

  \ XXX TODO move to its own file (check requiment of [if]):

: STR=  ( ca1 len1 ca2 len2 -- f )
  LENGTHS -  \ different lenghts?
  IF    2DROP 2DROP FALSE EXIT
  ELSE  DROP [ CONTEXT @ EDITOR ] -TEXT [ CONTEXT ! ] 0= 0=
  THEN  ;

  \ vim: filetype=abersoftforthafera
