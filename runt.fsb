\ runt.fsb
\ `RUNT` for Abersoft Forth

\ Copyright (C) 2015 Marcos Cruz (programandala.net)

\ This file is part of
\ Afera (Abersoft Forth Extensions, Resources and Addons)
\ http://programandala.net/en.program.afera.html

  \ -----------------------------------------------------------
  \ History of this file
  
  \ 2015-04-14: Extracted from the main file of the library.
  
  \ -----------------------------------------------------------

.( RUNT )

: RUNT  ( -- )

  \ Read a new RAM-disc from tape and load its first block.

  \ This word makes it possible to chain several RAM disk files
  \ from tape, allowing the automatic compilation of sources
  \ larger than 10 blocks.

  FLUSH INIT-DISC LOADT 1 LOAD  ;

: ?RUNT  ( -- )

  \ Read a new RAM-disc from tape and load its first block; if
  \ the current source is a block and the stack is not empty,
  \ an error is shown instead.

  \ This word makes it possible to chain several RAM disk files
  \ from tape, allowing the automatic compilation of sources
  \ larger than 10 blocks.
  \ 
  \ `DEPTH` is checked to prevent a RAM disk from leaving
  \ something on the stack, and also to make it possible to
  \ load individual files of the library, by pushing something
  \ on the stack before calling `RUNT`. Otherwise, when the ZX
  \ Spectrum emulator automatically rewinds the tape file (like
  \ Fuse does), the same file would be loaded in an endless
  \ loop.
  \
  \ `RP!` is neded before `LOAD` because every `LOAD` saves the
  \ contents of `BLK` and `IN` on the return stack, beside its
  \ own return address; chained loading of several RAM disks
  \ would fill it.

  BLK @ 0= DEPTH 0= OR 0=
  IF  ." Stack not empty " 20 ERROR  THEN  RUNT  ;

  \ vim: filetype=abersoftforth
