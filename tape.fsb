\ tape.fsb
\ Tape extensions for ZX Spectrum Abersoft Forth.

\ Copyright (C) 2015 Marcos Cruz (programandala.net)

\ This file is part of
\ Afera (Abersoft Forth Extensions, Resources and Addons)
\ http://programandala.net/en.program.afera.html

  \ -----------------------------------------------------------
  \ History of this file

  \ 2015-03-26: Start.
  \ 2015-03-28: First working version.

  \ -----------------------------------------------------------
  \ Documentation

  \ Dictionary references from Don Thomasson's book
  \ _Advanced Spectrum Forth_:
  \
  \ 340 (page 119): (TAPE)
  \ 
  \ pop hl
  \ push bc
  \ push ix
  \ ld a,l ; 1=LOAD, 0=SAVE
  \ ; this instruction is at 0x7618:
  \ ld hl,D000  ; start address to save or load
  \ ld ix,start-of-header-area
  \ ; ld a,(5C72) ; XXX this is a mistake in the book
  \ ; XXX fixed:
  \ ld (5C74),A
  \ call 075A
  \ pop ix
  \ pop bc
  \ jp next1
  \
  \ 344 (page 120): LOADT
  \
  \ 1 (TAPE)

  \ 345 (page 120): SAVET
  \
  \ 0 (TAPE)

  \ The load header (pointed by IX before calling the ROM
  \ routine) is at address 30182 (0x75E6).  Its containts are:

  \ +00 : 3 (identifier of code file type)
  \ +01 : "DISC      " = 10-char filename, padded with spaces
  \ +11 : 11263 (0x2BFF)  = length
  \ +13 : 53248 (0xD0FF)  = start address
  \ +15 : "  " (2 spaces) = not used for code files

  \ The save header (pointed by the ROM routine, by adding 0x11
  \ to IX) is right after the save header, at address 30199
  \ (0x75F7). It doe

  \ -----------------------------------------------------------

.( Tape extensions )

2 6 THRU

( Headers )

30182 CONSTANT LOADT-HEADER \ load header
17 CONSTANT /T-HEADER  \ header length
LOADT-HEADER /T-HEADER + CONSTANT SAVET-HEADER \ save header
/T-HEADER 2 * CONSTANT /T-HEADERS

10 CONSTANT /T-FILENAME \ filename max length

: >T-FILENAME  ( a1 -- a2 )   1+   ;
: >T-LENGTH    ( a1 -- a2 )  11 +  ;
: >T-START     ( a1 -- a2 )  13 +  ;

  \ Keep a copy of both tape headers:
0 VARIABLE T-HEADERS-BACKUP /T-HEADERS 2 - ALLOT
LOADT-HEADER T-HEADERS-BACKUP /T-HEADERS CMOVE

( Tools )

  \ Address of the file length
   \ in the code of the word `(TAPE)`:
30233 CONSTANT (TAPE)-START

: T-RESTORE  ( -- )
  \ Restore the original containts of both tape headers:
  T-HEADERS-BACKUP LOADT-HEADER /T-HEADERS CMOVE
  \ Unpatch `(TAPE)`
  LO (TAPE)-START !  ;

: -T-FILENAME  ( -- )
  \ Blank the filename of the load header.
  LOADT-HEADER >T-FILENAME /T-FILENAME BLANKS ;

: T-FILENAME!  ( ca len -- )
  \ Store a filename into the load header.
  -T-FILENAME  /T-FILENAME MIN
  LOADT-HEADER >T-FILENAME SWAP CMOVE  ;

: ANY-T-FILENAME  ( -- )
  255 LOADT-HEADER >T-FILENAME C!  ;


: T-LENGTH!  ( len -- )
  \ Set the given code length for the next tape loading,
  \ storing it into the load header.
  LOADT-HEADER >T-LENGTH !  ;

: T-START!  ( a -- )
  \ Set the given code start for the next tape loading,
  \ storing it into the load header and patching
  \ the code of the word `(TAPE)`.
  DUP (TAPE)-START !  LOADT-HEADER >T-START !  ;

  \ ( Debugging tools )

  \ XXX TMP for debugging:

  \ : T-DUMP  ( -- )
  \   CR ." Load header:"
  \   LOADT-HEADER /T-HEADER DUMP SPACE KEY DROP
  \   CR ." Save header:"
  \   SAVET-HEADER /T-HEADER DUMP
  \   CR ." (TAPE) start: " (TAPE)-START @ U.  ;

( TAPE>MEM MEM>TAPE )

: TAPE>MEM  ( a1 len1 a2 len2 -- )
  \ Load a file from tape into memory.
  \ a1      = destination address
  \ len1    = length (or zero if unspecified)
  \ a2 len2 = filename (len2 is zero if unspecified) 
  DUP   \ filename specified?
  IF  T-FILENAME!  ELSE  2DROP ANY-T-FILENAME  THEN
  T-LENGTH! T-START!  1 (TAPE)  T-RESTORE   ;

: MEM>TAPE  ( a1 len1 a2 len2 -- )
  \ Save a memory region into a tape file.
  \ a1      = address of the code
  \ len1    = length of the code
  \ a2 len2 = filename
  T-FILENAME! T-LENGTH! T-START!  0 (TAPE)  T-RESTORE  ;

( BLOCK>A /LOADT /SAVET )

: /LOADT  ( n -- )
  \ Load a RAM-disc from tape, at address of block n.
  \ Warning: the file will be loaded, no matter its length.
  \ n = first block (0..10)
  FLUSH BLOCK>A 0 S" DISC" TAPE>MEM  ;

: /SAVET  ( n1 n2 -- )
  \ Save a RAM-disc to tape, from block n1 to block n2.
  \ n1 = first block (0..10)
  \ n2 = last block (0..10)
  FLUSH 1+ BLOCK>A SWAP BLOCK>A DUP ROT SWAP -
  S" DISC" MEM>TAPE  ;

: INCLUDET  ( -- )
  \ Load a RAM-disc from tape, at address of block 2,
  \ and loads its first block.
  \ This word is intended to be used in block 1 in order
  \ to load all modules of an application.
  \ Warning: the file will be loaded, no matter its length.
  \ XXX TODO test
  2 /LOADT 3 LOAD  ;

  \ vim: filetype=abersoftforth
