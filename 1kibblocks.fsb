.( :NONAME )
\ 1kibblocks.fsb
\ 1 KiB disk blocks for ZX Spectrum Abersoft Forth

\ Copyright (C) 2015 Marcos Cruz (programandala.net)

\ This file is part of
\ Afera (Abersoft Forth Extensions, Resources and Addons)
\ http://programandala.net/en.program.afera.html

  \ -----------------------------------------------------------
  \ Description

  \ The disk blocks of Abersoft Forth follows the fig-Forth
  \ model:
 
  \ B/BUF = 128 bytes per buffer
  \ B/SCR = 8 blocks per screen

  \ But, using a RAM disk as mass storage, this seems more
  \ efficient:

  \ B/BUF = 1024 bytes per buffer
  \ B/SCR = 1 block per screen

  \ -----------------------------------------------------------
  \ History of this file

  \ 2015-04-15: First draft.
  \ 2015-05-04: First working version.

  \ -----------------------------------------------------------

  \ The ordinary definition of fig-Forth `EMPTY-BUFFERS` is:
  \
  \ : 
  \ : EMPTY-BUFFERS  ( -- )
  \   FIRST LIMIT OVER - ERASE  ;

  \ But the decoding of the definition implemented by Afersoft
  \ Forth reveals something interesting:

  \ DECODE EMPTY-BUFFERS
  \ 714A : EMPTY-BUFFERS
  \ 712A   FIRST
  \ 712C   LIMIT
  \ 712E   OVER
  \ 7130   -
  \ 7132   ERASE
  \ 7134   LIMIT
  \ 7136   FIRST
  \ 7138   (DO)
  \ 713A   LIT  7FFF
  \ 713E   I
  \ 7140   !
  \ 7142   LIT  84
  \ 7146   (+LOOP)  -E
  \ 714A ;S

  \ So the definition is, with decimal numbers:
  \
  \ : EMPTY-BUFFERS  ( -- )
  \   FIRST LIMIT OVER - ERASE
  \   LIMIT FIRST DO
  \     32767 I !
  \   132 +LOOP  ;

  \ The loop sets the disk block number of every buffer to
  \ 32767 (bit 16, the update bit, is set to 0).
  \
  \ The problem is the loop step is hardcoded, not calculated
  \ (`B/BUF 4 +`).

  \ XXX TMP
  \ This patch removes the final loop from `EMPTY-BUFFERS`:
' ;S CFA ' EMPTY-BUFFERS 10 + !


EMPTY-BUFFERS INIT-DISC  FIRST PREV !  FIRST USE !

  \ Change the constants:
1024 ' B/BUF !  1 ' B/SCR !  1 ' #BUFF !

  \ Finally, the definition of `+BUF` must be patched, because
  \ the length of disk buffers is hardcoded in it:
  \
  \ : +BUF  ( a1 -- a2 )
  \   132 DUP LIMIT = 
  \
  \ This patch updates it:

B/BUF 2+ 2+ ' +BUF 2+ !

  \ vim: filetype=abersoftforth
