\ gplusdos.fsb
\ GDOS/G+DOS support for ZX Spectrum Abersoft Forth

\ Copyright (C) 1988,1994,2015 Marcos Cruz (programandala.net)

\ This file is part of
\ Afera (Abersoft Forth Extensions, Resources and Addons)
\ http://programandala.net/en.program.afera.html

\ Requirements:
\ fsb:
\   (http://programandala.net/en.program.fsb.html)
\ Afera's main file
\   (http://programandala.net/en.program.afera.html)
\ Pleonasmo AF
\   (http://programandala.net/en.program.pleonasmo.html)

  \ 2015-03-13: Start, based on code already written in 1988
  \ and 1994.
  \
  \ 2015-04-01: Checks.
  \
  \ 2015-04-02: First succesful compilation, after some fixes
  \ in the assembler. Some words renamed.

\ XXX FIXME still not working fine: it seems some control chars
\ are included in file names.

( Init )

CR ." Loading G+DOS extensions" CR
FORTH DEFINITIONS
VOCABULARY DOS IMMEDIATE
DOS DEFINITIONS DECIMAL

10 CONSTANT /FILENAME  \ max filename length
1 VARIABLE DRIVE \ 1 or 2
[CHAR] d VARIABLE DEVICE \ "d" or "D"
-->

( UFIA: User File Information Area)

0 VARIABLE UFIA  24 2 - ALLOT

UFIA      CONSTANT DSTR1 \ drive: 1 or 2
UFIA 1+   CONSTANT FSTR1 \ program number
UFIA 2+   CONSTANT SSTR1 \ stream number
UFIA 3 +  CONSTANT LSTR1 \ device: "D" or "d"
UFIA 4 +  CONSTANT NSTR1 \ directory description
UFIA 5 +  CONSTANT NSTR2 \ file name
UFIA 15 + CONSTANT HD00  \ file type
UFIA 16 + CONSTANT HD0B  \ file length
UFIA 18 + CONSTANT HD0D  \ file start address
UFIA 20 + CONSTANT HD0F  \ BASIC length without variables
UFIA 22 + CONSTANT HD11  \ BASIC autorun line
-->

( File types, directory descriptions and hook codes)

  \ File types

0 CONSTANT BASIC-FILETYPE        1 CONSTANT DATA-ARRAY-FILETYPE
2 CONSTANT STRING-ARRAY-FILETYPE 3 CONSTANT CODE-FILETYPE

  \ Directory descriptions

01 CONSTANT BASIC-FILE    02 CONSTANT DATA-ARRAY
03 CONSTANT STRING-ARRAY  04 CONSTANT CODE-FILE
05 CONSTANT SNAPSHOT-48K  06 CONSTANT MICRODRIVE-FILE
07 CONSTANT SCREENS$-FILE 08 CONSTANT SPECIAL-FILE
09 CONSTANT SNAPSHOT-128K 10 CONSTANT OPENTYPE-FILE
11 CONSTANT EXECUTE-FILE

  \ Hook codes

HEX

33 CONSTANT HXFER 34 CONSTANT OFSM  35 CONSTANT HOFLE
36 CONSTANT SBYT  37 CONSTANT HSVBK 38 CONSTANT CFSM
39 CONSTANT PNTP  3A CONSTANT COPS  3B CONSTANT HGFLE
3C CONSTANT LBYT  3D CONSTANT HLDBK 3E CONSTANT WSAD
3F CONSTANT SAD   40 CONSTANT REST  41 CONSTANT HERAZ

DECIMAL -->

( UFIA manipulation)

: -FILENAME ( -- )

  \ Blank the filename area.

  NSTR2 /FILENAME BLANKS ;

: FILENAME!  ( ca len -- )

  \ Store a filename into the NSTR2 field of UFIA.

  \ ca len = filename

  -FILENAME /FILENAME MAX NSTR2 SWAP CMOVE ;


: >UFIA ( ca1 len1 ca2 len2 dir -- )

  \ Set the User File Information Area

  \ ca1 len1  = memory region
  \ ca2 len2  = filename
  \ dir       = directory description

  NSTR1 C!  FILENAME!  HD0B !  HD0D !
  DEVICE @ LSTR1 C!  DRIVE @ DSTR1 C!
  CODE-FILETYPE HD00 C! ;

: RAM-DISC>UFIA  ( ca len -- )

  \ Init the User File Information Area
  \ to load or save the Forth RAM disc.

  \ ca1 len1 = filename

  FLUSH LO /RAM-DISC 2SWAP SPECIAL-FILE >UFIA ;

-->

( Error checking)

: IOR>ERROR  ( ior -- n )
  \ Convert a DOS ior to a Forth error number.
  \ ior = the AF register returned by a DOS command:
  \     bit 0     = set: error
  \     bits 8-14 = error code
  \     bit 15    = set: ZX Spectrum error; unset: DOS error
  \ XXX TODO -- test
  DUP 1 AND       \ error?
  SWAP 255 /      \ error code
  DUP 128 AND     \ ZX Spectrum error?
  IF  -1 *  ELSE  100 +  THEN  ;

: ?DOS-ERROR  ( ior -- )

  \ XXX OLD

  \ ior = the AF register returned by a DOS command:
  \     bit 0     = set: error
  \     bits 8-14 = error code
  \     bit 15    = set: ZX Spectrum error; unset: DOS error

  IOR>ERROR ?ERROR ;

-->

( Save a file)

CODE (MEM>DISK) ( -- ior )

  \ Save a file to disk using the data hold in UFIA.

  BC PUSH  IX PUSH  \ save the Forth registers
  DSTR1 IX LDP#
  8 RST  HOFLE C, \ open the file and create its header
  NC IF \ no error?
    HD0D DE LDP \ start
    HD0B BC LDP \ length
    8 RST  HSVBK C, \ save to file
    NC IF  \ no error?
      8 RST  CFSM C,  \ close the file
    THEN
  THEN
  IX POP  BC POP  \ restore the Forth registers
  AF PUSH END-CODE -->

( Load a file)

CODE (DISK>MEM) ( -- ior )

  \ Load a file from disk using the data hold in UFIA.

  BC PUSH  IX PUSH  \ save the Forth registers
  DSTR1 IX LDP#  8 RST  HGFLE C, \ get the file
  NC IF \ no error?  -- load the file header:
    HD00 DE LDP#  9 B LD# \ destination and count
    BEGIN
      8 RST  LBYT C, \ load byte and store it in A
      DE STAP  DE INC  \ update destination and count
    DSZ
    HD0D DE LDP  HD0B BC LDP \ start and length
    8 RST  HLDBK C, \ load the file
  THEN
  IX POP  BC POP  \ restore the Forth registers
  AF PUSH  END-CODE -->

( Delete a file)

CODE (ERASE) ( -- ior )

  \ Erase a disk file using the data hold in UFIA.

  BC PUSH  IX PUSH  \ save the Forth registers
  UFIA IX LDP#
  8 RST  HERAZ C, \ erase the file
  IX POP  BC POP  \ restore the Forth registers
  AF PUSH

  END-CODE -->

( User interface)

FORTH DEFINITIONS

: DISK>MEM ( ca1 len1 ca2 len2 -- )
  \ Load a file from disk.
  \ ca1 len1 = memory region to load
  \ ca2 len2 = filename
  DOS >UFIA (DISK>MEM) ?DOS-ERROR ;

: MEM>DISK ( ca1 len1 ca2 len2 -- )
  \ Save a file to disk.
  \ ca1 len1 = memory region to save
  \ ca2 len2 = filename
  DOS >UFIA (MEM>DISK) ?DOS-ERROR ;

: SAVED ( ca len -- )
  \ Save the Forth RAM-disc to disk
  \ (word named after Abersoft Forth's `SAVET`.)
  \ ca len = filename
  DOS RAM-DISC>UFIA (MEM>DISK) ?DOS-ERROR ;

: LOADD ( ca len -- )
  \ Load a Forth RAM-disc from disk.
  \ (word named after Abersoft Forth's `LOADT`.)
  \ ca len = filename
  DOS RAM-DISC>UFIA (DISK>MEM) ?DOS-ERROR ;

: ERASE ( ca len -- )
  \ Erase a disk file.
  \ ca len = filename
  0 0 2SWAP DOS >UFIA (ERASE) ?DOS-ERROR ;

  \ vim: filetype=abersoftforth
